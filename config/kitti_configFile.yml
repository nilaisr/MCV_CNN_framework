# Problem type
problem_type: 'classification' # Option: ['segmentation','classification']
# Model
model_type: 'VGG16'   # Options: ['DenseNetFCN', 'FCN8']

    ### load options
resume_experiment: False           # Restore the best model obtained in the experiment defined if exist
pretrained_model: 'basic'            # 'None': from scratch, 'basic': pretraned from imagenet, 'custom': personal model
input_model_path: None            # Path and pretrained file to load [None uses experiment path and model name by default]
load_weight_only: True            # Recomended true, loads only weights and parameters
basic_models_path: './pretrained_models/' # Path for the basic models (ImageNet weights) where they will be download
    ### Save options
save_weight_only: True            # Recomended true, stores only weights and parameters
model_name: 'VGG16'          # Name of the model to store
output_model_path: None            # Path to store the model using model_name [None uses the default experiment path]

# Loss type
loss_type: 'cross_entropy_segmentation' # options: ['cross_entropy_segmentation','focal_segmentation']
normalize_loss              : True

# General parameters

train_samples: -1 #-1 uses all the data available inside the dataset files
valid_samples: -1 #-1 uses all the data available inside the dataset files
test_samples: -1 #-1 uses all the data available inside the dataset files
train_batch_size: 8
valid_batch_size: 1
test_batch_size: 1
train: True
test: True # Calculate metrics on test giving the gt
validation: True
predict_test: True  # True when you want to generate predictions from test, doesn't need gt
predict_path_output: None # None uses the default output in the experiment folder /predictions

# Image properties
size_image_train: null #(1280, 960)

resize_image_train: !!python/tuple [224,224] #(320, 640)#(640, 480)
resize_image_valid: !!python/tuple [224,224] #(320, 640)#(640, 480)
resize_image_test: !!python/tuple [224,224] #(320, 640)#(640, 480)
crop_train: null
grayscale: False #Use this option to convert to rgb a grascale dataset

# Dataset properties

train_dataset_path          : '/home/mcv/datasets/M5/classification/KITTI/train'
valid_dataset_path          : '/home/mcv/datasets/M5/classification/KITTI/valid'
test_dataset_path           : '/home/mcv/datasets/M5/classification/KITTI/test'
train_images_txt            : null
train_gt_txt                : null
valid_images_txt            : null
valid_gt_txt                : null
test_images_txt             : null
test_gt_txt                 : null

labels  : null
map_labels  : null
num_classes : 46
shuffle: True
void_class: 255   # void id or value on the image

# Training
epochs: 2     # Max number of epochs, use 0 to save directly a model, useful to make conversions
initial_epoch: 1     # Defines the starting epoch number
valid_samples_epoch: -1    # Number of validation images used to validate an epoch

    ### Optimizer ###
optimizer: 'SGD' #Options available ['SGD','Adam','RMSProp']
momentum1: 0.95
momentum2: 0.99
learning_rate: 1.0e-4
learning_rate_bias: 1.0e-4
weight_decay: 0.0005
    ### Scheduler
scheduler: 'ReduceLROnPlateau' # ['ReduceLROnPlateau','Step','MultiStep','Exponential', None]
decay: 0.1   # Learnng rate decay to apply (lr*decay)
sched_patience: 5     # ReduceLROnPlateau option: epoch patience without loss change until a lr decrement
step_size: 20    # Step option: epoch counter to decrease lr
milestone: [60,30,10] # MultiStep option: define different milestones (epochs) to decrease lr
    ### Save criteria
save_condition: 'valid_mIoU'        # ['always','(x)_loss','(x)_mAcc','(x)_mIoU'] x = valid or train_loss
    ### Early Stopping
early_stopping: True
stop_condition: 'valid_mIoU'        # [(x)_loss','(x)_mAcc','(x)_mIoU'] x = valid or train_loss
patience: 5

# Image preprocess
rescale: 1.
mean: [0.28689553, 0.32513301, 0.28389176] #[0.37296272, 0.37296272, 0.37296272]
std: [0.18696375, 0.19017339, 0.18720214] #[0.21090189, 0.21090189, 0.21090189]

# Data augmentation
hflips: False
random_dist                 : False  # Activate random distortions to the input image [brightness, contrast, saturation]

color_map: null
num_images: null